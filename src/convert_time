let
    fnConvertTime = (timeText as text) as nullable datetimezone =>
        let
            // Determine the offset string based on known abbreviations.
            offset = if Text.Contains(timeText, "EST") then "-0500"
                     else if Text.Contains(timeText, "EDT") then "-0400"
                     else if Text.Contains(timeText, "PST") then "-0800"
                     else if Text.Contains(timeText, "PDT") then "-0700"
                     else if Text.Contains(timeText, "MST") then "-0700"
                     else if Text.Contains(timeText, "MDT") then "-0600"
                     else if Text.Contains(timeText, "UTC") then "+0000"
                     else if Text.Contains(timeText, "Arizona") then "-0700"
                     else "",
            // Remove all common time zone abbreviations with a single nested Text.Replace.
            cleanText = Text.Replace(
                          Text.Replace(
                          Text.Replace(
                          Text.Replace(
                          Text.Replace(
                          Text.Replace(
                          Text.Replace(
                          Text.Replace(timeText, " EST", ""), " EDT", ""), " PST", ""), " PDT", ""), " MST", ""), " MDT", ""), " UTC", ""), " Arizona", ""),
            // Ensure there is a "T" between date and time (assumes the date is in yyyy-mm-dd).
            withT = if Text.Contains(cleanText, "T") then cleanText else Text.Insert(cleanText, 10, "T"),
            // Remove any extra spaces.
            noSpaces = Text.Replace(withT, " ", ""),
            // Append the numeric offset if it's not already present.
            appended = if offset <> "" and not Text.End(noSpaces, 5) = offset then noSpaces & offset else noSpaces,
            // Insert a colon into the offset if missing (e.g. "-0500" â†’ "-05:00").
            finalText = if Text.Length(appended) >= 5 and not Text.Contains(Text.End(appended, 5), ":") then
                            Text.Insert(appended, Text.Length(appended)-2, ":")
                        else
                            appended,
            // Try to parse the final text as a DateTimeZone value.
            parsed = try DateTimeZone.FromText(finalText) otherwise null
        in
            parsed
in
    fnConvertTime
