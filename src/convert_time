let
    fnConvertTime = (timeText as text) as nullable datetimezone =>
        let
            // Remove leading/trailing spaces.
            trimmed = Text.Trim(timeText),
            // Remove known timezone abbreviations.
            removedAbbreviations = List.Accumulate(
                {" EST", " EDT", " PST", " PDT", " MST", " MDT", " UTC", " Arizona"},
                trimmed,
                (state, current) => Text.Replace(state, current, "")
            ),
            // Insert a "T" between date and time if missing (assuming date is 10 characters).
            withT = if Text.Contains(removedAbbreviations, "T") then removedAbbreviations 
                    else Text.Insert(removedAbbreviations, 10, "T"),
            // Remove all spaces.
            noSpaces = Text.Replace(withT, " ", ""),
            // Check if the last 5 characters (the offset) contain a colon. If not, insert one.
            lenNoSpaces = Text.Length(noSpaces),
            lastFive = if lenNoSpaces >= 5 then Text.End(noSpaces, 5) else "",
            withColon = if lastFive <> "" and not Text.Contains(lastFive, ":") then Text.Insert(noSpaces, lenNoSpaces - 2, ":") else noSpaces,
            // Attempt to parse the final string as a DateTimeZone value.
            parsed = try DateTimeZone.FromText(withColon) otherwise null
        in
            parsed
in
    fnConvertTime
