// Power Query function to convert 'yyyy-MM-dd HH:mm:ss.fff Â±hhmm TTT' to UTC datetimezone
let
    ConvertToUtc = (timestampText as text) as nullable datetimezone =>
        let
            // 1. Trim and split the input timestamp into parts
            trimmed    = Text.Trim(timestampText),
            parts      = List.Select(Text.SplitAny(trimmed, " "), each _ <> ""),  // split on whitespace, remove empty parts
            partCount  = List.Count(parts),

            // Identify parts: date, time, offset (if any), and abbreviation
            datePart   = if partCount > 0 then parts{0} else "",
            timePart   = if partCount > 1 then parts{1} else "",
            // Determine if a numeric offset is present (third part starting with + or -)
            hasOffset  = partCount > 2 and Text.Length(parts{2}) >= 3 
                         and (Text.StartsWith(parts{2}, "+") or Text.StartsWith(parts{2}, "-")),
            offsetStr  = if hasOffset then parts{2} else null,
            tzAbbrev   = if hasOffset 
                         then (if partCount > 3 then parts{3} else null) 
                         else (if partCount > 2 then parts{2} else null),

            // 2. Parse numeric offset if present
            offsetHours   = if offsetStr <> null then 
                                let
                                    hrs = Number.From(Text.Range(offsetStr, 1, 2)),
                                    sign = if Text.StartsWith(offsetStr, "-") then -1 else 1
                                in sign * hrs
                            else 0,
            offsetMinutes = if offsetStr <> null then 
                                let 
                                    mins = if Text.Length(offsetStr) >= 5 
                                           then Number.From(Text.Range(offsetStr, 3, 2)) 
                                           else 0,
                                    sign = if Text.StartsWith(offsetStr, "-") then -1 else 1
                                in sign * mins
                            else 0,

            // 3. Combine date and time
            localDateTime = try DateTime.FromText(datePart & " " & timePart) otherwise null,

            // 4. Attach the original timezone offset to get a datetimezone
            localDateTimeZone = if localDateTime <> null 
                                then DateTime.AddZone(localDateTime, offsetHours, offsetMinutes) 
                                else null,

            // 5. Convert to UTC (offset 0) by shifting the zone
            utcDateTimeZone = if localDateTimeZone <> null 
                              then DateTimeZone.SwitchZone(localDateTimeZone, 0, 0) 
                              else null
        in
            utcDateTimeZone
in
    ConvertToUtc
