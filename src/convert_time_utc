let
    fnConvertTimeUTC = (timeText as text) as nullable datetimezone =>
        let
            // Step 1: Trim the input.
            trimmed = Text.Trim(timeText),
            // Step 2: Remove any known timezone abbreviation only if it appears at the end.
            noAbbrev = List.Accumulate(
                {" EST", " EDT", " PST", " PDT", " MST", " MDT", " UTC", " Arizona"},
                trimmed,
                (state, current) => 
                    if Text.End(state, Text.Length(current)) = current 
                    then Text.Trim(Text.Start(state, Text.Length(state) - Text.Length(current)))
                    else state
            ),
            // Step 3: Ensure there is a "T" between date and time.
            withT = if Text.Contains(noAbbrev, "T") then noAbbrev else Text.Insert(noAbbrev, 10, "T"),
            // Step 4: Remove any remaining spaces.
            noSpaces = Text.Replace(withT, " ", ""),
            // Step 5: Fix the numeric offset:
            // Assume the last 5 characters represent the offset (like "-0500").
            lenText = Text.Length(noSpaces),
            lastFive = if lenText >= 5 then Text.End(noSpaces, 5) else "",
            fixedText = if lastFive <> "" and not Text.Contains(lastFive, ":") 
                        then Text.Insert(noSpaces, lenText - 2, ":") 
                        else noSpaces,
            // Step 6: Parse the fixed text as a DateTimeZone.
            dtZone = try DateTimeZone.FromText(fixedText) otherwise null,
            // Step 7: Force the value to UTC.
            utcTime = if dtZone <> null then DateTimeZone.SwitchZone(dtZone, 0) else null
        in
            utcTime
in
    fnConvertTimeUTC
