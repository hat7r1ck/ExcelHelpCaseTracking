let
    ConvertToUtcAsDatetime = (timestampText as text) as nullable datetime =>
        let
            // 1. Trim and split the input into parts.
            trimmed    = Text.Trim(timestampText),
            parts      = List.Select(Text.SplitAny(trimmed, " "), each _ <> ""),
            partCount  = List.Count(parts),
            
            // Identify parts: date, time, offset (if any), and abbreviation.
            datePart   = if partCount > 0 then parts{0} else "",
            timePart   = if partCount > 1 then parts{1} else "",
            hasOffset  = partCount > 2 and Text.Length(parts{2}) >= 3 and 
                         (Text.StartsWith(parts{2}, "+") or Text.StartsWith(parts{2}, "-")),
            offsetStr  = if hasOffset then parts{2} else null,
            tzAbbrev   = if hasOffset 
                         then (if partCount > 3 then parts{3} else null) 
                         else (if partCount > 2 then parts{2} else null),
            
            // 2. Parse numeric offset if present, otherwise use abbreviation mapping.
            offsetHours   = if offsetStr <> null then 
                                let
                                    hrs  = Number.From(Text.Range(offsetStr, 1, 2)),
                                    sign = if Text.StartsWith(offsetStr, "-") then -1 else 1
                                in sign * hrs
                            else
                                if tzAbbrev <> null then 
                                    if tzAbbrev = "EST" then -5
                                    else if tzAbbrev = "EDT" then -4
                                    else if tzAbbrev = "CST" then -6
                                    else if tzAbbrev = "CDT" then -5
                                    else if tzAbbrev = "MST" then -7
                                    else if tzAbbrev = "MDT" then -6
                                    else if tzAbbrev = "PST" then -8
                                    else if tzAbbrev = "PDT" then -7
                                    else if tzAbbrev = "CET" then 1
                                    else if tzAbbrev = "CEST" then 2
                                    else 0
                                else 0,
            offsetMinutes = if offsetStr <> null then 
                                let 
                                    mins = if Text.Length(offsetStr) >= 5 then Number.From(Text.Range(offsetStr, 3, 2)) else 0,
                                    sign = if Text.StartsWith(offsetStr, "-") then -1 else 1
                                in sign * mins
                            else 0,
            
            // 3. Parse the date and time into a datetime.
            localDateTime = try DateTime.FromText(datePart & " " & timePart) otherwise null,
            
            // 4. Attach the parsed offset to form a datetimezone.
            localDateTimeZone = if localDateTime <> null 
                                then DateTime.AddZone(localDateTime, offsetHours, offsetMinutes) 
                                else null,
            
            // 5. Convert to UTC (datetimezone with offset 0).
            utcDateTimeZone = if localDateTimeZone <> null 
                              then DateTimeZone.SwitchZone(localDateTimeZone, 0, 0) 
                              else null,
            
            // 6. Remove the zone information to return a pure datetime.
            utcDatetime = if utcDateTimeZone <> null then DateTimeZone.RemoveZone(utcDateTimeZone) else null
        in
            utcDatetime
in
    ConvertToUtcAsDatetime
