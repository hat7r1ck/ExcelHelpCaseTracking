let
    fnConvertTimeUTC = (timeText as text) as nullable datetimezone =>
        let
            // Trim the input.
            trimmed = Text.Trim(timeText),
            // Split the input on spaces.
            parts = Text.Split(trimmed, " "),
            // Expect the first part to be the date, the second the time, and the third the numeric offset.
            datePart = parts{0},
            timePart = parts{1},
            numericOffset = if List.Count(parts) >= 3 then parts{2} else "",
            // If numericOffset is 5 characters (e.g. "-0500"), insert a colon to get "-05:00".
            offsetFormatted = if Text.Length(numericOffset) = 5 then Text.Insert(numericOffset, 3, ":") else numericOffset,
            // Combine date and time with a "T".
            isoBase = datePart & "T" & timePart,
            // Parse the base datetime (ignoring offset) as a datetime.
            dt = DateTime.FromText(isoBase),
            // Calculate offset in hours.
            offsetHours = if offsetFormatted <> "" then 
                             Number.From(Text.Start(offsetFormatted, 3)) + Number.From(Text.End(offsetFormatted, 2)) / 60 
                          else 0,
            // Determine sign based on offset.
            sign = if Text.StartsWith(offsetFormatted, "-") then -1 else 1,
            // Adjust the parsed datetime to UTC.
            utcTime = if sign = -1 then dt + #duration(0, Number.Abs(offsetHours), 0, 0)
                      else dt - #duration(0, Number.Abs(offsetHours), 0, 0),
            // Convert the UTC datetime to text in ISO8601 format (without fractional seconds).
            utcText = DateTime.ToText(utcTime, "yyyy-MM-ddTHH:mm:ss")
        in
            // Parse the text as a DateTimeZone with Z (UTC) suffix.
            DateTimeZone.FromText(utcText & "Z")
in
    fnConvertTimeUTC
