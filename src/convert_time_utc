let
    fnConvertTimeUTC = (timeText as text) as nullable datetimezone =>
        let
            // Remove leading/trailing spaces.
            trimmed = Text.Trim(timeText),
            // Remove the trailing abbreviation by taking the text before the last space.
            // This assumes the numeric offset and the abbreviation are separated by a space.
            noAbbrev = Text.BeforeDelimiter(trimmed, " ", {RelativePosition.FromEnd}),
            // Now noAbbrev should be like: "2025-02-24 18:07:50.72718703 -0500"
            
            // Insert a "T" between date and time if it's not present.
            withT = if Text.Contains(noAbbrev, "T") then noAbbrev else Text.Insert(noAbbrev, 10, "T"),
            // Remove any extra spaces.
            noSpaces = Text.Replace(withT, " ", ""),
            // Ensure the offset is in proper format: if the last 5 characters (e.g. "-0500") lack a colon, insert one.
            lenText = Text.Length(noSpaces),
            offsetPart = if lenText >= 5 then Text.End(noSpaces, 5) else "",
            fixedText = if offsetPart <> "" and not Text.Contains(offsetPart, ":") then Text.Insert(noSpaces, lenText - 2, ":") else noSpaces,
            // Parse the fixed text as a DateTimeZone.
            dtZone = DateTimeZone.FromText(fixedText),
            // Convert the value to UTC (offset 0).
            utcTime = DateTimeZone.SwitchZone(dtZone, 0)
        in
            utcTime
in
    fnConvertTimeUTC
